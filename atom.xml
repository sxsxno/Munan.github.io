<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Munan&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-23T09:36:44.708Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Munan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024强网杯Re部分WP</title>
    <link href="http://example.com/2024/10/23/2024%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81Re%E9%83%A8%E5%88%86WP/"/>
    <id>http://example.com/2024/10/23/2024%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81Re%E9%83%A8%E5%88%86WP/</id>
    <published>2024-10-23T07:36:25.000Z</published>
    <updated>2024-10-23T09:36:44.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="serv1ce"><a href="#serv1ce" class="headerlink" title="serv1ce"></a>serv1ce</h3><p>有点混淆，jeb5直接反编译解出字符串，然后就可以找他的startService</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.nobody.Serv1ce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">MyService</span> extends Service &#123;</span><br><span class="line">    private String <span class="built_in">input</span>;</span><br><span class="line">    private String key;</span><br><span class="line">    private byte[] keyarray;</span><br><span class="line">    <span class="built_in">int</span> num;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;Serv1ce&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyService() &#123;</span><br><span class="line">        this.key = <span class="string">&quot;1liIl11lIllIIl11llII&quot;</span>;</span><br><span class="line">        this.keyarray = new byte[<span class="number">0x40</span>];</span><br><span class="line">        this.num = <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private native boolean check(String arg1, byte[] arg2, <span class="built_in">int</span> arg3) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override  // android.app.Service</span></span><br><span class="line">    public IBinder onBind(Intent intent0) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(<span class="string">&quot;Not yet implemented&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override  // android.app.Service</span></span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        ++this.num;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override  // android.app.Service</span></span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        <span class="keyword">if</span>(this.check(this.<span class="built_in">input</span>, this.keyarray, this.num)) &#123;</span><br><span class="line">            Toast.makeText(this.getApplicationContext(), <span class="string">&quot;You Are Right&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(this.getApplicationContext(), <span class="string">&quot;Wrong&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override  // android.app.Service</span></span><br><span class="line">    public <span class="built_in">int</span> onStartCommand(Intent intent0, <span class="built_in">int</span> v, <span class="built_in">int</span> v1) &#123;</span><br><span class="line">        ++this.num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> v2 = <span class="number">0</span>; v2 &lt; <span class="number">0x40</span>; ++v2) &#123;</span><br><span class="line">            this.keyarray[v2] = (byte)((this.key.charAt(v2 % this.key.length()) - <span class="number">0x77</span> ^ <span class="number">23</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(intent0 != null) &#123;</span><br><span class="line">            this.<span class="built_in">input</span> = intent0.getStringExtra(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">            Toast.makeText(this.getApplicationContext(), <span class="string">&quot;Input Success&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.onStartCommand(intent0, v, v1);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/24qwnt/24qwnt-img1.png" alt="image.png"><br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">0xB9</span>, <span class="number">0x32</span>, <span class="number">0xC2</span>, <span class="number">0xD4</span>, <span class="number">0x69</span>, <span class="number">0xD5</span>, <span class="number">0xCA</span>, <span class="number">0xFB</span>, <span class="number">0xF8</span>, <span class="number">0xFB</span>, <span class="number">0x80</span>, <span class="number">0x7C</span>, <span class="number">0xD4</span>, <span class="number">0xE5</span>, <span class="number">0x93</span>, <span class="number">0xD5</span>, <span class="number">0x1C</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xDF</span>, <span class="number">0xDA</span>, <span class="number">0xA1</span>, <span class="number">0x11</span>, <span class="number">0xF8</span>, <span class="number">0xA1</span>, <span class="number">0x93</span>, <span class="number">0x93</span>, <span class="number">0xC2</span>, <span class="number">0x7C</span>, <span class="number">0x8B</span>, <span class="number">0x1C</span>, <span class="number">0x66</span>, <span class="number">0x01</span>, <span class="number">0x3D</span>, <span class="number">0xA3</span>, <span class="number">0x67</span>]</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;1liIl11lIllIIl11llII&quot;</span></span><br><span class="line">keyarray = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x40</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x40</span>):</span><br><span class="line">    keyarray[i] =((<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)])-<span class="number">0x77</span>)^<span class="number">23</span>)&amp;<span class="number">0xff</span></span><br><span class="line"><span class="built_in">print</span>(keyarray)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">ord</span>(num)^keyarray[i])*<span class="number">11</span>)&amp;<span class="number">0xff</span> == res[i]:</span><br><span class="line">            <span class="built_in">print</span>(num,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="A-game"><a href="#A-game" class="headerlink" title="A_game"></a>A_game</h3><p><a href="https://github.com/NJU-TJL/PacManX">NJU-TJL&#x2F;PacManX: 基于C++控制台（Windows平台）的一个吃豆人小游戏 (github.com)</a></p><p><img src="/images/24qwnt/image.png" alt="image.png"></p><p>bindiff结果</p><p>下面几个就是出题人改的跟flag有关的函数了</p><p>动调把ps脚本扣出来，里面好几层iex，运行输出一下 iex后面的部分</p><p>最内层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function enenenenene &#123;</span><br><span class="line">    param(</span><br><span class="line">        $plaintextBytes,</span><br><span class="line">        $keyBytes</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Initialize S and KSA</span></span><br><span class="line">    $S = <span class="number">0.</span><span class="number">.255</span></span><br><span class="line">    $j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i -lt <span class="number">256</span>; $i++) &#123;</span><br><span class="line">        $j = ($j + $S[$i] + $keyBytes[$i % $keyBytes.Length]) % <span class="number">256</span></span><br><span class="line">        $temp = $S[$i]</span><br><span class="line">        $S[$i] = $S[$j]</span><br><span class="line">        $S[$j] = $temp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PRGA and encryption</span></span><br><span class="line">    $i = <span class="number">0</span></span><br><span class="line">    $j = <span class="number">0</span></span><br><span class="line">    $ciphertextBytes = @()</span><br><span class="line">    <span class="keyword">for</span> ($k = <span class="number">0</span>; $k -lt $plaintextBytes.Length; $k++) &#123;</span><br><span class="line">        $i = ($i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        $j = ($j + $S[$i]) % <span class="number">256</span></span><br><span class="line"> $temp = $S[$i]</span><br><span class="line">        $S[$i] = $S[$j]</span><br><span class="line">        $S[$j] = $temp</span><br><span class="line">        $t = ($S[$i] + $S[$j]) % <span class="number">256</span></span><br><span class="line">        $ciphertextBytes += ($plaintextBytes[$k] -bxor $S[$t])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return ciphertext as a string</span></span><br><span class="line">    <span class="keyword">return</span> $ciphertextBytes</span><br><span class="line">&#125;</span><br><span class="line">function enenenenene1 &#123;</span><br><span class="line">    param(</span><br><span class="line">        $inputbyte</span><br><span class="line">    )</span><br><span class="line">    $key = @(<span class="number">0x70</span>, <span class="number">0x6f</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>)</span><br><span class="line">    $encryptedText = @();</span><br><span class="line">    <span class="keyword">for</span> ($k = <span class="number">0</span>; $k -lt $inputbyte.Length; $k++) &#123;</span><br><span class="line">        $encryptedText = enenenenene -plaintextBytes $inputbyte -keyBytes $key;</span><br><span class="line">        $key = enenenenene -plaintextBytes $key -keyBytes $encryptedText;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $encryptedText + $key;</span><br><span class="line">&#125;</span><br><span class="line">function enenenenene2 &#123;</span><br><span class="line">    param(</span><br><span class="line">        $inputbyte</span><br><span class="line">    )</span><br><span class="line">    $key = @(<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>)</span><br><span class="line">    <span class="keyword">for</span> ($k = <span class="number">0</span>; $k -lt $inputbyte.Length; $k++) &#123;</span><br><span class="line">        $inputbyte[$k] = $inputbyte[$k] + $key[$k % $key.Length]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $inputbyte;</span><br><span class="line">&#125;</span><br><span class="line">function enenenenene3 &#123;</span><br><span class="line">    param(</span><br><span class="line">        $inputbyte</span><br><span class="line">    )</span><br><span class="line">    $key = @(<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x33</span>, <span class="number">0x72</span>)</span><br><span class="line">    <span class="keyword">for</span> ($k = <span class="number">0</span>; $k -lt $inputbyte.Length; $k++) &#123;</span><br><span class="line">        $inputbyte[$k] = $inputbyte[$k] * $key[$k % $key.Length]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $inputbyte;</span><br><span class="line">&#125;</span><br><span class="line">$registryPath = <span class="string">&#x27;HKCU:\Software\PacManX&#x27;</span></span><br><span class="line">$valueName = <span class="string">&#x27;MYFLAG&#x27;</span></span><br><span class="line">$value = Get-ItemPropertyValue $registryPath $valueName</span><br><span class="line">$plaintext = @($value) | ForEach-Object &#123;</span><br><span class="line">    $<span class="built_in">input</span> = $_</span><br><span class="line">    $plaintext = @()</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i -lt $<span class="built_in">input</span>.Length; $i++) &#123;</span><br><span class="line">        $plaintext += [<span class="built_in">int</span>][char]$<span class="built_in">input</span>[$i]</span><br><span class="line">    &#125;</span><br><span class="line">    $plaintext</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($plaintext.Length -ne <span class="number">36</span>) &#123;</span><br><span class="line">    <span class="type">Set</span>-Content -Path <span class="string">&quot;log.txt&quot;</span> -Value <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    exit</span><br><span class="line">&#125;</span><br><span class="line">$encrypted1Text = enENenenene2 -inputbyte (enenenENene2 -inputbyte (enenenenene3 -inputbyte (Enenenenene2 -inputbyte (enenenenene2 -inputbyte (enenenenene2 -inputbyte (enenenenene1 -<span class="built_in">input</span> $plaintext))))))</span><br><span class="line">$result = @(<span class="number">38304</span>, <span class="number">8928</span>, <span class="number">43673</span>, <span class="number">25957</span> , <span class="number">67260</span>, <span class="number">47152</span>, <span class="number">16656</span>, <span class="number">62832</span> , <span class="number">19480</span> , <span class="number">66690</span>, <span class="number">40432</span>, <span class="number">15072</span> , <span class="number">63427</span> , <span class="number">28558</span> , <span class="number">54606</span>, <span class="number">47712</span> , <span class="number">18240</span> , <span class="number">68187</span> , <span class="number">18256</span>, <span class="number">63954</span> , <span class="number">48384</span>, <span class="number">14784</span>, <span class="number">60690</span> , <span class="number">21724</span> , <span class="number">53238</span> , <span class="number">64176</span> , <span class="number">9888</span> , <span class="number">54859</span> , <span class="number">23050</span> , <span class="number">58368</span> , <span class="number">46032</span> , <span class="number">15648</span> , <span class="number">64260</span> , <span class="number">17899</span> , <span class="number">52782</span> , <span class="number">51968</span> , <span class="number">12336</span> , <span class="number">69377</span> , <span class="number">27844</span> , <span class="number">43206</span> , <span class="number">63616</span>)</span><br><span class="line"><span class="keyword">for</span> ($k = <span class="number">0</span>; $k -lt $result.Length; $k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($encrypted1Text[$k] -ne $result[$k]) &#123;</span><br><span class="line">        <span class="type">Set</span>-Content -Path <span class="string">&quot;log.txt&quot;</span> -Value <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"> exit</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Set</span>-Content -Path <span class="string">&quot;log.txt&quot;</span> -Value <span class="string">&quot;RIGHT&quot;</span></span><br></pre></td></tr></table></figure><p>enenenenene 就是个rc4，加密解密一样，powershell写个解密exp</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># execute: powershell -executionpolicy bypass -file .\exp.ps1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene</span></span> &#123; <span class="comment"># rc4</span></span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$plaintextBytes</span>,</span><br><span class="line">        <span class="variable">$keyBytes</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Initialize S and KSA</span></span><br><span class="line">    <span class="variable">$S</span> = <span class="number">0</span>..<span class="number">255</span></span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">256</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$S</span>[<span class="variable">$i</span>] + <span class="variable">$keyBytes</span>[<span class="variable">$i</span> % <span class="variable">$keyBytes</span><span class="type">.Length</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$S</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$i</span>] = <span class="variable">$S</span>[<span class="variable">$j</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PRGA and encryption</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable">$ciphertextBytes</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$plaintextBytes</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$i</span> = (<span class="variable">$i</span> + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$S</span>[<span class="variable">$i</span>]) % <span class="number">256</span></span><br><span class="line"> <span class="variable">$temp</span> = <span class="variable">$S</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$i</span>] = <span class="variable">$S</span>[<span class="variable">$j</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span></span><br><span class="line">        <span class="variable">$t</span> = (<span class="variable">$S</span>[<span class="variable">$i</span>] + <span class="variable">$S</span>[<span class="variable">$j</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$ciphertextBytes</span> += (<span class="variable">$plaintextBytes</span>[<span class="variable">$k</span>] <span class="operator">-bxor</span> <span class="variable">$S</span>[<span class="variable">$t</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return ciphertext as a string</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ciphertextBytes</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enc1</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x6f, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="variable">$encryptedText</span> = <span class="selector-tag">@</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$encryptedText</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$inputbyte</span> <span class="literal">-keyBytes</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable">$key</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$key</span> <span class="literal">-keyBytes</span> <span class="variable">$encryptedText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$encryptedText</span> + <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec1</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$initial_key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x6f, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="variable">$encryptedText</span> = <span class="variable">$inputbyte</span>[<span class="number">0</span><span class="type">..</span>(<span class="variable">$inputbyte</span><span class="type">.Length</span>-<span class="variable">$initial_key</span><span class="type">.Length</span>-<span class="number">1</span>)]</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$inputbyte</span>[(<span class="variable">$inputbyte</span><span class="type">.Length</span>-<span class="variable">$initial_key</span><span class="type">.Length</span>)<span class="type">..</span>(<span class="variable">$inputbyte</span><span class="type">.Length</span>-<span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># Write-Output $encryptedText</span></span><br><span class="line">    <span class="comment"># Write-Output $key</span></span><br><span class="line">    <span class="comment"># Write-Output $encryptedText</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$key</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$key</span> <span class="literal">-keyBytes</span> <span class="variable">$encryptedText</span>;</span><br><span class="line">    <span class="variable">$plain</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$encryptedText</span> <span class="literal">-keyBytes</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$plain</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enc2</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] + <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] - <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enc3</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x33, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] * <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec3</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x33, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] / <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># $registryPath = &#x27;HKCU:\Software\PacManX&#x27;</span></span><br><span class="line"><span class="comment"># $valueName = &#x27;MYFLAG&#x27;</span></span><br><span class="line"><span class="comment"># $value = Get-ItemPropertyValue $registryPath $valueName</span></span><br><span class="line"><span class="comment"># $plaintext = @($value) | ForEach-Object &#123;</span></span><br><span class="line"><span class="comment">#     $input = $_</span></span><br><span class="line"><span class="comment">#     $plaintext = @()</span></span><br><span class="line"><span class="comment">#     for ($i = 0; $i -lt $input.Length; $i++) &#123;</span></span><br><span class="line"><span class="comment">#         $plaintext += [int][char]$input[$i]</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment">#     $plaintext</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># if ($plaintext.Length -ne 36) &#123;</span></span><br><span class="line"><span class="comment">#     Set-Content -Path &quot;log.txt&quot; -Value &quot;ERROR&quot;</span></span><br><span class="line"><span class="comment">#     exit</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># $encrypted1Text = enENenenene2 -inputbyte (enenenENene2 -inputbyte (enenenenene3 -inputbyte (Enenenenene2 -inputbyte (enenenenene2 -inputbyte (enenenenene2 -inputbyte (enenenenene1 -input $plaintext))))))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Host</span> (dec1 <span class="literal">-inputbyte</span> (enc1 <span class="literal">-inputbyte</span> <span class="selector-tag">@</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="built_in">Write-Host</span> (dec2 <span class="literal">-inputbyte</span> (enc2 <span class="literal">-inputbyte</span> <span class="selector-tag">@</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="built_in">Write-Host</span> (dec3 <span class="literal">-inputbyte</span> (enc3 <span class="literal">-inputbyte</span> <span class="selector-tag">@</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="selector-tag">@</span>(<span class="number">38304</span>, <span class="number">8928</span>, <span class="number">43673</span>, <span class="number">25957</span> , <span class="number">67260</span>, <span class="number">47152</span>, <span class="number">16656</span>, <span class="number">62832</span> , <span class="number">19480</span> , <span class="number">66690</span>, <span class="number">40432</span>, <span class="number">15072</span> , <span class="number">63427</span> , <span class="number">28558</span> , <span class="number">54606</span>, <span class="number">47712</span> , <span class="number">18240</span> , <span class="number">68187</span> , <span class="number">18256</span>, <span class="number">63954</span> , <span class="number">48384</span>, <span class="number">14784</span>, <span class="number">60690</span> , <span class="number">21724</span> , <span class="number">53238</span> , <span class="number">64176</span> , <span class="number">9888</span> , <span class="number">54859</span> , <span class="number">23050</span> , <span class="number">58368</span> , <span class="number">46032</span> , <span class="number">15648</span> , <span class="number">64260</span> , <span class="number">17899</span> , <span class="number">52782</span> , <span class="number">51968</span> , <span class="number">12336</span> , <span class="number">69377</span> , <span class="number">27844</span> , <span class="number">43206</span> , <span class="number">63616</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = dec1 <span class="literal">-inputbyte</span> (dec2 <span class="literal">-inputbyte</span> (dec2 <span class="literal">-inputbyte</span> (dec2 <span class="literal">-inputbyte</span> (dec3 <span class="literal">-inputbyte</span> (dec2 <span class="literal">-inputbyte</span> (dec2 <span class="literal">-inputbyte</span> <span class="variable">$result</span>))))))</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = [<span class="type">System.Text.Encoding</span>]::ASCII.GetString(<span class="variable">$flag</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="variable">$flag</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag: 73412036-7d8c-437b-9026-0c2ca1b7f79d</p><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>流程大概如下，可以根据S盒+调试确定是AES，轮数也是10</p><p><img src="/images/24qwnt/image2.png" alt="image.png"></p><p><img src="/images/24qwnt/image3.png" alt="image.png"></p><p>phrase函数把8bit输入和4bit索引合在一起变成12bit</p><p><img src="/images/24qwnt/image4.png" alt="image.png"></p><p>check函数判断给定的12bit是否符合任一条件，即图中这一堆&amp;v1&amp;(v2&#x3D;&#x3D;0)，由于12bit里面有4bit索引，所以能过这个check的输入是固定的</p><p>爆破得到所有能过check的12bit输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&quot;defs.h&quot; </span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">__int64 __fastcall sub_4020F7(<span class="built_in">int</span> *a1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">int</span> v1; // r8d</span><br><span class="line">  <span class="built_in">int</span> v2; // ecx</span><br><span class="line">  <span class="built_in">int</span> v3; // ecx</span><br><span class="line">  <span class="built_in">int</span> v5; // [rsp+8h] [rbp-38h]</span><br><span class="line">  <span class="built_in">int</span> v6; // [rsp+Ch] [rbp-34h]</span><br><span class="line">  <span class="built_in">int</span> v7; // [rsp+10h] [rbp-30h]</span><br><span class="line">  <span class="built_in">int</span> v8; // [rsp+14h] [rbp-2Ch]</span><br><span class="line">  <span class="built_in">int</span> v9; // [rsp+18h] [rbp-28h]</span><br><span class="line">  <span class="built_in">int</span> v10; // [rsp+1Ch] [rbp-24h]</span><br><span class="line">  <span class="built_in">int</span> v11; // [rsp+20h] [rbp-20h]</span><br><span class="line">  <span class="built_in">int</span> v12; // [rsp+24h] [rbp-1Ch]</span><br><span class="line">  <span class="built_in">int</span> v13; // [rsp+28h] [rbp-18h]</span><br><span class="line">  <span class="built_in">int</span> v14; // [rsp+2Ch] [rbp-14h]</span><br><span class="line">  __int64 v15; // [rsp+30h] [rbp-10h]</span><br><span class="line">  <span class="built_in">int</span> i; // [rsp+38h] [rbp-8h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v17; // [rsp+3Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  v17 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    HIDWORD(v15) = a1[<span class="number">12</span> * i];</span><br><span class="line">    LODWORD(v15) = a1[<span class="number">12</span> * i + <span class="number">1</span>];</span><br><span class="line">    v14 = a1[<span class="number">12</span> * i + <span class="number">2</span>];</span><br><span class="line">    v13 = a1[<span class="number">12</span> * i + <span class="number">3</span>];</span><br><span class="line">    v12 = a1[<span class="number">12</span> * i + <span class="number">4</span>];</span><br><span class="line">    v11 = a1[<span class="number">12</span> * i + <span class="number">5</span>];</span><br><span class="line">    v10 = a1[<span class="number">12</span> * i + <span class="number">6</span>];</span><br><span class="line">    v9 = a1[<span class="number">12</span> * i + <span class="number">7</span>];</span><br><span class="line">    v8 = a1[<span class="number">12</span> * i + <span class="number">8</span>];</span><br><span class="line">    v7 = a1[<span class="number">12</span> * i + <span class="number">9</span>];</span><br><span class="line">    v6 = a1[<span class="number">12</span> * i + <span class="number">10</span>];</span><br><span class="line">    v5 = a1[<span class="number">12</span> * i + <span class="number">11</span>];</span><br><span class="line">    v1 = (unsigned __int8)v7 &amp; (unsigned __int8)v8 &amp; (unsigned __int8)v9 &amp; (v11 == <span class="number">0</span>) &amp; (v12 == <span class="number">0</span>) &amp; (unsigned __int8)v13 &amp; ((v14 | (unsigned <span class="built_in">int</span>)v15 | HIDWORD(v15)) == <span class="number">0</span>) &amp; (v10 == <span class="number">0</span>) &amp; (v6 == <span class="number">0</span>) | (unsigned __int8)v7 &amp; (unsigned __int8)v9 &amp; (unsigned __int8)v11 &amp; (v13 == <span class="number">0</span>) &amp; (v14 == <span class="number">0</span>) &amp; BYTE4(v15) &amp; ((_DWORD)v15 == <span class="number">0</span>) &amp; (v12 == <span class="number">0</span>) &amp; (v10 == <span class="number">0</span>) &amp; (v8 == <span class="number">0</span>) &amp; (v6 == <span class="number">0</span>) | (unsigned __int8)v6 &amp; (v8 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) &amp; (v10 == <span class="number">0</span>) &amp; (unsigned __int8)v11 &amp; (unsigned __int8)v12 &amp; (unsigned __int8)(v14 &amp; v15 &amp; BYTE4(v15)) &amp; (v13 == <span class="number">0</span>) &amp; (v7 == <span class="number">0</span>);</span><br><span class="line">    v2 = (unsigned __int8)v5 &amp; (unsigned __int8)v6 &amp; (unsigned __int8)v8 &amp; (unsigned __int8)v9 &amp; (unsigned __int8)v10 &amp; (unsigned __int8)v11 &amp; (unsigned __int8)v12 &amp; (v14 == <span class="number">0</span>) &amp; (unsigned __int8)(v15 &amp; BYTE4(v15)) &amp; (v13 == <span class="number">0</span>) &amp; (v7 == <span class="number">0</span>) | (v6 == <span class="number">0</span>) &amp; (v7 == <span class="number">0</span>) &amp; (unsigned __int8)v8 &amp; (unsigned __int8)v9 &amp; (unsigned __int8)v10 &amp; (unsigned __int8)v12 &amp; (unsigned __int8)v13 &amp; (unsigned __int8)v15 &amp; (HIDWORD(v15) == <span class="number">0</span>) &amp; (v14 == <span class="number">0</span>) &amp; (v11 == <span class="number">0</span>) &amp; (v5 == <span class="number">0</span>) | (unsigned __int8)v5 &amp; (v7 == <span class="number">0</span>) &amp; (unsigned __int8)v8 &amp; (unsigned __int8)v10 &amp; (unsigned __int8)v12 &amp; (unsigned __int8)v13 &amp; (unsigned __int8)v14 &amp; BYTE4(v15) &amp; ((_DWORD)v15 == <span class="number">0</span>) &amp; (v11 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) &amp; (v6 == <span class="number">0</span>) | (unsigned __int8)v5 &amp; (unsigned __int8)v7 &amp; (unsigned __int8)v8 &amp; (unsigned __int8)v10 &amp; (unsigned __int8)v11 &amp; (unsigned __int8)v13 &amp; (unsigned __int8)v14 &amp; (v15 == <span class="number">0</span>) &amp; (v12 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) &amp; (v6 == <span class="number">0</span>) | (v1 | (unsigned __int8)v6 &amp; (unsigned __int8)v7 &amp; (v9 == <span class="number">0</span>) &amp; (unsigned __int8)v10 &amp; (v12 == <span class="number">0</span>) &amp; (unsigned __int8)v13 &amp; (unsigned __int8)v14 &amp; BYTE4(v15) &amp; ((_DWORD)v15 == <span class="number">0</span>) &amp; (v11 == <span class="number">0</span>) &amp; (v8 == <span class="number">0</span>)) &amp; (v5 == <span class="number">0</span>);</span><br><span class="line">    v3 = (unsigned __int8)v5 &amp; (unsigned __int8)v6 &amp; (v8 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) &amp; (unsigned __int8)v10 &amp; (v12 == <span class="number">0</span>) &amp; (v13 == <span class="number">0</span>) &amp; (v14 == <span class="number">0</span>) &amp; (unsigned __int8)(v15 &amp; BYTE4(v15)) &amp; (v11 == <span class="number">0</span>) &amp; (v7 == <span class="number">0</span>) | (v6 == <span class="number">0</span>) &amp; (v7 == <span class="number">0</span>) &amp; (v8 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) &amp; (unsigned __int8)v10 &amp; (v12 == <span class="number">0</span>) &amp; (unsigned __int8)v13 &amp; ((v14 | (unsigned <span class="built_in">int</span>)v15 | HIDWORD(v15)) == <span class="number">0</span>) &amp; (v11 == <span class="number">0</span>) &amp; (v5 == <span class="number">0</span>) | (unsigned __int8)v5 &amp; (unsigned __int8)v6 &amp; (unsigned __int8)v7 &amp; (v9 == <span class="number">0</span>) &amp; (v10 == <span class="number">0</span>) &amp; (unsigned __int8)v11 &amp; (unsigned __int8)v12 &amp; (v14 == <span class="number">0</span>) &amp; (unsigned __int8)v15 &amp; (HIDWORD(v15) == <span class="number">0</span>) &amp; (v13 == <span class="number">0</span>) &amp; (v8 == <span class="number">0</span>) | (unsigned __int8)v5 &amp; (unsigned __int8)v7 &amp; (v9 == <span class="number">0</span>) &amp; (v10 == <span class="number">0</span>) &amp; (unsigned __int8)v11 &amp; ((v12 | v13 | v14 | (unsigned <span class="built_in">int</span>)v15 | HIDWORD(v15)) == <span class="number">0</span>) &amp; (v8 == <span class="number">0</span>) &amp; (v6 == <span class="number">0</span>) | (unsigned __int8)v5 &amp; (v7 == <span class="number">0</span>) &amp; (v8 == <span class="number">0</span>) &amp; (unsigned __int8)v9 &amp; (unsigned __int8)v10 &amp; (unsigned __int8)v11 &amp; (unsigned __int8)v12 &amp; (v14 == <span class="number">0</span>) &amp; BYTE4(v15) &amp; ((_DWORD)v15 == <span class="number">0</span>) &amp; (v13 == <span class="number">0</span>) &amp; (v6 == <span class="number">0</span>) | v2;</span><br><span class="line">    <span class="keyword">if</span> ( !((unsigned __int8)v6 &amp; (unsigned __int8)v8 &amp; (unsigned __int8)v10 &amp; (unsigned __int8)v12 &amp; (v14 == <span class="number">0</span>) &amp; (unsigned __int8)v15 &amp; (HIDWORD(v15) == <span class="number">0</span>) &amp; (v13 == <span class="number">0</span>) &amp; (v11 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) &amp; (v7 == <span class="number">0</span>) &amp; (v5 == <span class="number">0</span>) | (unsigned __int8)v5 &amp; (unsigned __int8)v6 &amp; (unsigned __int8)v7 &amp; (unsigned __int8)v8 &amp; (v10 == <span class="number">0</span>) &amp; (v11 == <span class="number">0</span>) &amp; (unsigned __int8)v12 &amp; (v14 == <span class="number">0</span>) &amp; (unsigned __int8)v15 &amp; (HIDWORD(v15) == <span class="number">0</span>) &amp; (v13 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) | v3 | (unsigned __int8)v6 &amp; (unsigned __int8)v7 &amp; (unsigned __int8)v8 &amp; (unsigned __int8)v10 &amp; (unsigned __int8)v12 &amp; ((v13 | v14 | (unsigned <span class="built_in">int</span>)v15 | HIDWORD(v15)) == <span class="number">0</span>) &amp; (v11 == <span class="number">0</span>) &amp; (v9 == <span class="number">0</span>) &amp; (v5 == <span class="number">0</span>)) )</span><br><span class="line">      v17 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v17;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line"><span class="built_in">int</span> res[<span class="number">13</span>];</span><br><span class="line">  <span class="built_in">int</span> num;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">12</span>);i++)&#123;</span><br><span class="line">res[<span class="number">0</span>] = i&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">1</span>] = (i&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>;</span><br><span class="line">     res[<span class="number">2</span>] = (i&gt;&gt;<span class="number">2</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">3</span>] = (i&gt;&gt;<span class="number">3</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">4</span>] = (i&gt;&gt;<span class="number">4</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">5</span>] = (i&gt;&gt;<span class="number">5</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">6</span>] = (i&gt;&gt;<span class="number">6</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">7</span>] = (i&gt;&gt;<span class="number">7</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">8</span>] = (i&gt;&gt;<span class="number">8</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">9</span>] = (i&gt;&gt;<span class="number">9</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">10</span>] = (i&gt;&gt;<span class="number">10</span>)&amp;<span class="number">1</span>;</span><br><span class="line">res[<span class="number">11</span>] = (i&gt;&gt;<span class="number">11</span>)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sub_4020F7(res))&#123;</span><br><span class="line">//    printf(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">  // <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">11</span>;j++)&#123;</span><br><span class="line">// printf(<span class="string">&quot;%d &quot;</span>,res[j]);</span><br><span class="line">// &#125;</span><br><span class="line">      num = res[<span class="number">8</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">9</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">10</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">11</span>];</span><br><span class="line">      printf(<span class="string">&quot;a[%d]=&quot;</span>,num);</span><br><span class="line">      num = res[<span class="number">0</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">1</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">2</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">3</span>];  </span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">4</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">5</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">6</span>];</span><br><span class="line">      num = (num&lt;&lt;<span class="number">1</span>) + res[<span class="number">7</span>];</span><br><span class="line">      printf(<span class="string">&quot;0x%x\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// data = [<span class="number">18</span>,<span class="number">143</span>,<span class="number">236</span>,<span class="number">194</span>,<span class="number">133</span>,<span class="number">4</span>,<span class="number">178</span>,<span class="number">76</span>,<span class="number">91</span>,<span class="number">186</span>,<span class="number">74</span>,<span class="number">207</span>,<span class="number">17</span>,<span class="number">54</span>,<span class="number">10</span>,<span class="number">72</span>]</span><br></pre></td></tr></table></figure><p>AES key从程序里dump一份（0x405420）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3577402</span>ECCA44A3F9AB72182F9B01F35</span><br></pre></td></tr></table></figure><p>AES ECB解回去即可</p><p><img src="/images/24qwnt/image5.png" alt="image.png"></p><p>加上uuid的横杠：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>d87ef03<span class="literal">-77bb-491a-80f5-4620245807c4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Reverse&quot;&gt;&lt;a href=&quot;#Reverse&quot; class=&quot;headerlink&quot; title=&quot;Reverse&quot;&gt;&lt;/a&gt;Reverse&lt;/h2&gt;&lt;h3 id=&quot;serv1ce&quot;&gt;&lt;a href=&quot;#serv1ce&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="Reverse" scheme="http://example.com/tags/Reverse/"/>
    
  </entry>
  
</feed>
